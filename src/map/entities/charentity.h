/*
===========================================================================
Copyright (c) 2010-2014 Darkstar Dev Teams
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/
This file is part of DarkStar-server source code.
===========================================================================
*/
#ifndef _CHARENTITY_H
#define _CHARENTITY_H
#include "../../common/cbasetypes.h"
#include "../../common/mmo.h"
#include <map>
#include <list>
#include <deque>
#include "battleentity.h"
#include "../item_container.h"
#include "../linkshell.h"
#include "petentity.h"
#include "automatonentity.h"
#include "../recast_container.h"
#include "../latent_effect_container.h"
#include "../trade_container.h"
#include "../treasure_pool.h"
#include "../merit.h"
#include "../instance.h"
#include "../universal_container.h"
#include "../utils/itemutils.h"
// Quest Areas
enum QUESTAREA
{
QUESTS_SANDORIA	= 0,
QUESTS_BASTOK	= 1,
QUESTS_WINDURST	= 2,
QUESTS_JEUNO	= 3,
QUESTS_OTHER	= 4,
QUESTS_OUTLANDS	= 5,
QUESTS_AHTURHGAN	= 6,
QUESTS_CRYSTALWAR	= 7,
QUESTS_ABYSSEA	= 8,
QUESTS_ADOULIN	= 9,
QUESTS_COALITION	= 10
};
#define MAX_QUESTAREA 11
#define MAX_QUESTID 256
#define MAX_MISSIONAREA 13
#define MAX_MISSIONID 95
struct jobs_t
{
uint32 unlocked;	// ??????? ????? ?????????, ????????? ????????? (?????? ??? - ?????????????? ?????????)
uint8 job[MAX_JOBTYPE];	// ??????? ??????? ??? ?????? ?? ?????????
uint16 exp[MAX_JOBTYPE];	// ??????? ?????????? ????? ??? ?????? ?? ?????????
uint8 genkai;	// ???????????? ??????? ????????? ?????????
};
struct event_t
{
int32 EventID; // ????? ???????
int32 Option; // ????????? ???????????? ?????????
CBaseEntity* Target; // ????????? ???????
string_t Script; // ???? ? ?????, ??????????? ?? ????????? ???????
string_t Function; // ?? ????????????
void reset()
{
EventID = -1;
Option = 0;
Target = 0;
Script.clear();
Function.clear();
}
};
struct profile_t
{
uint8	nation;	// ?????????????? ? ???????????
uint8	mhflag;	// ???? ?????? ?? MogHouse
uint16	title;	// ??????
uint16 fame[5];	// ???????????
uint8 rank[3];	// ???? ? ???? ????????????
uint32	rankpoints;	// ???? ????? ? ???? ????????????
location_t home_point;	// ????? ??????????? ?????????
};
struct expChain_t
{
uint16 chainNumber;
uint32 chainTime;
};
struct NationTP_t
{
uint32	sandoria;
uint32	bastok;
uint32	windurst;
uint32	ahturhgan;
uint32	maw;
uint32	pastsandoria;
uint32	pastbastok;
uint32	pastwindurst;
};
struct PetInfo_t
{
bool	respawnPet;	// used for spawning pet on zone
uint8	petID;	// id as in wyvern(48) , carbuncle(8) ect..
PETTYPE	petType;	// type of pet being transfered
int32	petHP;	// pets hp
float	petTP;	// pets tp
};
struct AuctionHistory_t
{
uint16	itemid;
uint8	stack;
uint32	price;
uint8	status; //e.g. if sold/not sold/on market
};
struct UnlockedAttachments_t
{
uint8 heads;
uint8 frames;
uint32 attachments[8];
};
struct GearSetMod_t
{
uint8	modNameId;
uint16	modId;
uint16	modValue;
};
struct currency_t
{
union {
struct {
uint32 sandoriacp, bastokcp, windurstcp;
};
uint32 conquestpoints[3];
};
union {
struct {
uint16 beastmanseal, kindredseal, kindredcrest, hkindredcrest, skindredcrest;
};
uint16 seals[5];
};
uint16 ancientbeastcoins;
uint16 valorpoints, scylds;
union {
struct {
uint32 fishingpoints, woodworkingpoints, smithingpoints, goldsmithingpoints, weavingpoints, leatherpoints, bonepoints, alchemypoints, cookingpoints;
};
uint32 guildpoints[9];
};
uint32 cinders;
union {
struct {
uint8 firefewell, icefewell, windfewell, earthfewell, lightningfewell, waterfewell, lightfewell, darkfewell;
};
uint8 fewell[8];
};
uint32 ballistapoints, fellowpoints;
union {
struct {
uint16 chocobuckssandoria, chocobucksbastok, chocobuckswindurst;
};
uint16 chocobucks[3];
};
uint32 researchmarks;
union {
struct {
uint8 tunnelworms, morionworms, phantomworms;
};
uint8 meeblesworms[3];
};
uint32 moblinmarbles;
uint16 infamy, prestige;
uint32 legionpoints, sparksofeminence, shiningstars, imperialstanding;
union {
struct {
uint32 lsanctumassault, mjtgassault, lcavernassault, periqiaassault, ilrusiatollassault, nyzultokens;
};
uint32 assaultpoints[6];
};
uint32 zeni, jettons, therionichor, alliednotes, bayld;
uint16 kineticunits, unknown;
uint32 obsidianfragments;
uint16 lebondoptwings, unknown2;
uint32 mweyaplasm, cruor, resistancecredits, dominionnotes;
union {
struct {
uint8 fifthechtrophies, fourthechtrophies, thirdechtrophies, secondechtrophies, firstechtrophies;
};
uint8 echelontrophies[5];
};
uint8 cavepoints, idtags, opcredits;
uint32 traverserstones, voidstones, kupofriedcorundums;
uint8 imprimaturs, pheromonesacks;
uint16 pulchridoptwings;
};
/************************************************************************
* *
* *
* *
************************************************************************/
class CBasicPacket;
typedef std::deque<CBasicPacket*> PacketList_t;
typedef std::map<uint32,CBaseEntity*> SpawnIDList_t;
typedef std::vector<EntityID_t> BazaarList_t;
class CCharEntity : public CBattleEntity
{
public:
jobs_t	jobs;	// ????????? ????????? ?????????
keyitems_t	keys;	// ??????? ???????? ?????????
event_t	m_event;	// ????????? ??? ??????? ???????
skills_t	RealSkills;	// ????????? ???? ???????? ?????? ?????????, ? ????????? ?? 0.1 ? ?? ???????????? ???????
nameflags_t	nameflags;	// ????? ????? ?????? ?????????
profile_t	profile;	// ??????? ????????? (???, ??? ????????? ?????? ? ?????????)
expChain_t	expChain;	// Exp Chains
search_t	search;	// ?????? ? ???????????, ???????????? ? ???? ??????
bazaar_t	bazaar;	// ??? ??????, ??????????? ??? ?????? bazaar
uint16	m_EquipFlag;	// ??????? ???????, ?????????????? ??????????? (????? ?????? ? ?????????, ?????? ? equip[])
uint16	m_EquipBlock;	// ??????????????? ?????? ??????????
bool	m_EquipSwap;	// true if equipment was recently changed
uint8	equip[17];	// SlotID where equipment is
uint8	equipLoc[17];	// ContainerID where equipment is
uint8	m_ZonesList[36];	// ?????? ?????????? ?????????? ???
uint8	m_SpellList[128];	// ?????? ????????? ??????????
uint8	m_TitleList[94];	// ?????? ??????????? ??????
uint8	m_Abilities[46];	// ?????? ??????? ????????????
uint8	m_LearnedAbilities[46];	// learnable abilities (corsair rolls)
uint8	m_TraitList[16];	// ?????? ???????? ???????? ???????????? ? ???? ??????? ?????
uint8	m_PetCommands[32];	// ?????? ????????? ?????? ???????
uint8	m_WeaponSkills[32];
questlog_t	m_questLog[MAX_QUESTAREA];	// ?????? ???? ???????
missionlog_t	m_missionLog[MAX_MISSIONAREA];	// ?????? ??????
assaultlog_t	m_assaultLog;	// ?????? assault ??????
campaignlog_t	m_campaignLog;	// ?????? campaing ??????
uint32	m_rangedDelay;	// ranged attack delay (with timestamp for repeat attacks, hence 32bit)for items, abilities and magic
uint32	m_lastBcnmTimePrompt;	// the last message prompt in seconds
PetInfo_t	petZoningInfo;	// used to repawn dragoons pets ect on zone
void	resetPetZoningInfo();	// reset pet zoning info (when changing job ect)
uint8	m_SetBlueSpells[20];	// The 0x200 offsetted blue magic spell IDs which the user has set. (1 byte per spell)
UnlockedAttachments_t	m_unlockedAttachments;	// Unlocked Automaton Attachments (1 bit per attachment)
CAutomatonEntity* PAutomaton; // Automaton statistics
// ??? ?????? ?? ????????? ? ?????? ??????????, ?.?. ?????? ?????????????
// ?????????? ????? ?????? ?????? ???????????
uint16	m_copCurrent;	// ??????? ?????? Chains of Promathia
uint16	m_acpCurrent;	// ??????? ?????? A Crystalline Prophecy
uint16	m_mkeCurrent;	// ??????? ?????? A Moogle Kupo d'Etat
uint16	m_asaCurrent;	// ??????? ?????? A Shantotto Ascension
// TODO: ???????? ????? ??????? ?????? ????????? ? char_vars, ? ?? ?????, ?.?. ??? ?????????? ?? ???????????? ? ?????????? ??????? ? ?????? ?? ???????? ? ???? ??????? ????????
currency_t m_currency; // conquest points, imperial standing points etc
NationTP_t	nationtp;	// supply tp, runic portal, campaign tp,...
uint8 GetGender(); // ?????? ??? ?????????
int32	firstPacketSize(); // ?????? ??????? ?????? ? PacketList
void clearPacketList(); // ???????? PacketList
void pushPacket(CBasicPacket*); // ?????????? ????? ?????? ? PacketList
bool	isPacketListEmpty(); // ???????? ??????? PacketList
CBasicPacket*	popPacket(); // ????????? ??????? ?????? ?? PacketList
CLinkshell* PLinkshell; // linkshell, ? ??????? ???????? ????????
CTreasurePool*	PTreasurePool; // ?????????, ??????? ? ????????
CMeritPoints* PMeritPoints; //
bool	MeritMode;	//If true then player is meriting
CRecastContainer* PRecastContainer; //
CLatentEffectContainer* PLatentEffectContainer;
CItemContainer* PGuildShop;	// ??????? ??????? ???????, ? ??????? ???????? ?????????? ???????
CItemContainer*	getStorage(uint8 LocationID);	// ????????? ????????? ?? ??????????????? ?????????
CTradeContainer* TradeContainer; // Container used specifically for trading.
CTradeContainer* Container; // ????????????? ????????? ??? ??????, ???????, ???????? ? ?.?.
CUContainer*	UContainer;	// ????? ????????????? ????????? ??? ??????, ???????, ???????? ? ?.?.
CTradeContainer* CraftContainer; // Container used for crafting actions.
CBaseEntity*	PWideScanTarget;	// wide scane ????
SpawnIDList_t	SpawnPCList;	// ?????? ??????? ??????????
SpawnIDList_t	SpawnMOBList;	// ?????? ??????? ????????
SpawnIDList_t	SpawnPETList;	// ?????? ??????? ????????
SpawnIDList_t	SpawnNPCList;	// ?????? ??????? npc
void	SetName(int8* name);	// ????????????? ??? ????????? (??? ?????????????? 15-? ?????????)
EntityID_t TradePending; // ID ?????????, ????????????? ?????
EntityID_t InvitePending; // ID ?????????, ???????????? ??????????? ? ??????
EntityID_t BazaarID; // Pointer to the bazaar we are browsing.
BazaarList_t	BazaarCustomers; // Array holding the IDs of the current customers
uint32	m_InsideRegionID;	// ????? ???????, ? ??????? ?????? ????????? ???????? (??? ????? ???????? ? m_event ???)
uint8	m_LevelRestriction;	// ??????????? ?????? ?????????
uint16 m_Costum; // ???????????? ?????? ????????? (??????)
uint16	m_Monstrosity;	// Monstrosity model ID
uint32	m_AHHistoryTimestamp;	// Timestamp when last asked to view history
uint32 m_DeathCounter; // Counter when you last died. This is set when you first login
uint32 m_DeathTimestamp; // Timestamp when death counter has been saved to database
uint8 m_PVPFlag; // pvp
uint8	m_hasTractor;	// checks if player has tractor already
uint8	m_hasRaise;	// checks if player has raise already
uint8 m_hasAutoTarget; // ??????????? ????????????? AutoTarget ???????
position_t	m_StartActionPos;	// ??????? ?????? ???????? (????????????? ????????, ?????? ????????, ??????? tractor)
uint32	m_PlayTime;
uint32	m_SaveTime;
uint8	m_GMlevel; // Level of the GM flag assigned to this character
bool m_isGMHidden; // GM Hidden flag to prevent player updates from being processed.
bool m_isMentor; // Mentor flag status.
bool m_isNewPlayer; // New player flag..
int8	getShieldSize();
bool	getWeaponSkillKill();
void	setWeaponSkillKill(bool isWeaponSkillKill);
bool	getMijinGakure();
void	setMijinGakure(bool isMijinGakure);
bool	isRapidShot;	// Flag to track rapid shot
bool	secondDoubleShotTaken;	// Flag to track number of double shots taken
bool	isWeaponUnlocked(uint16 indexid);	// return if weapon is broken
bool	addWsPoints(uint8 points, uint16 WeaponIndex);	// return if weapon is broken
UnlockedWeapons_t unlockedWeapons[MAX_UNLOCKABLE_WEAPONS];	// chars unlocked weapon status
int16 addTP(int16 tp) override;
int32 addHP(int32 hp) override;
int32 addMP(int32 mp) override;
std::vector<GearSetMod_t> m_GearSetMods;	// The list of gear set mods currently applied to the character.
std::vector<AuctionHistory_t> m_ah_history;	// AH history list (? ??????? ????? ???????????? UContainer)
void SetPlayTime(uint32 playTime);	// Set playtime
uint32 GetPlayTime(bool needUpdate = true);	// Get playtime
CItemArmor* getEquip(SLOTTYPE slot);
CCharEntity();	// ???????????
~CCharEntity();	// ??????????
private:
CItemContainer* m_Inventory;
CItemContainer* m_Mogsafe;
CItemContainer* m_Storage;
CItemContainer*	m_Tempitems;
CItemContainer* m_Moglocker;
CItemContainer*	m_Mogsatchel;
CItemContainer*	m_Mogsack;
CItemContainer* m_Mogcase;
CItemContainer* m_Wardrobe;
bool	m_isWeaponSkillKill;
bool	m_isMijinGakure;
PacketList_t PacketList;	// ? ???? ?????? ???????? ??? ??????, ??????????????? ??? ???????? ?????????
};
#endif